<?php

namespace Front\DomainBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Front\UserBundle\Entity\User;

/**
 * newsDomainRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DomainRepository extends EntityRepository
{
    /**
     * Send back the domains the user can manage
     * @param User $user
     * @return \Doctrine\ORM\QueryBuilder
     * @throws \Exception
     */
    public function getActiveQueryBuilderForUser(User $user)
    {
        $qb = $this->getActiveQueryBuilder();

        //We check that the user can access this datas by his role but if it's the admin, we don't need to block
        if (in_array("ROLE_DOMAIN_NEWS_DOCUMENT", $user->getRoles())) {
            if (!in_array("ROLE_DOMAIN_ADMIN", $user->getRoles()))
                $qb->andWhere("domain_repository.id = :domainId")
                ->setParameter("domainId", $user->getDomainManaged()->getId());
        }
        else {
            throw new \Exception("This user can't access this datas");
        }

        return $qb;
    }

    public function getActiveQueryBuilder() {
        $qb = $this->createQueryBuilder('domain_repository');
        $qb = $qb
            ->where($qb->expr()->eq("domain_repository.active", true));
        return $qb;
    }

    /**
     * @param string $metadataClass
     * @return array
     */
    public function getActiveWithChildren($metadataClass = NULL)
    {
        $em = $this->getEntityManager();
        $qb = $this->createQueryBuilder('domain_repository');
        $qb->join("domain_repository.domainElements", "domain_elements")
            ->where("domain_elements.endPublicationDate >= :dateToday")
            ->orWhere($qb->expr()->isNull("domain_elements.endPublicationDate"))
            ->andWhere($qb->expr()->eq("domain_repository.active", true))
            ->andWhere("domain_elements.beginPublicationDate <= :dateToday")
            ->setParameter("dateToday", new \DateTime());

        if ($metadataClass != NULL) {
            $qb->andWhere("domain_elements INSTANCE OF :class")
                ->setParameter("class", $em->getClassMetadata($metadataClass));
        }

        return $qb
            ->orderBy("domain_repository.label")
            ->getQuery()
            ->getResult();
    }
}
